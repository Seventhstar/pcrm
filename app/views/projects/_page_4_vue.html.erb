<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.vue_app',
    mixins: [vmxGoods],
    data: <%= fill_vue_data(@project, {
      f_gt: true,
      project_id: @project.id,
      confirmModal: false,
      currentIndex: 0,
      currentGoods: '',
      
      inputs: ['name', 'date_place', 'gsum', 'description'],
      required: ['name', 'date_place', 'gsum'],

      selects: ['provider', 'currency'],
      
      fields: [],
      controls: [],
      provider: [],
      
      offerAmount: {},
      orderAmount: {},
      closedAmount: {},

      filter: [],
      modalGoodsForm: false,
      
      grandOfferTotal: [],
      grandOrderTotal: [],
      grandClosedTotal: [],
      grouped: [],
      
      texts: "gtype new_gtype id",
      lists: "gtypes+priority new_gtypes+priority currencies+short goods_priorities \
              goods_states:raw@goods_states goods_files+owner_id",

      providers: @providers,
      project_g_types: [],

      goods: @goods
     }, 'page4') %>,

    updated(){
      this.onInput();
    },

    created(){
      this.new_gtype = null
      this.gtypes.forEach(()=>this.addControlAndField())
      this.calculateTotal()
      this.$root.$on('onInput', this.onInput);
      this.filter.push({field: 'goods_priority_id', value: 1})
      this.makeFilter()
    },

    computed: {

    },

    methods: {

      makeFilter() {
        var vm = this
        this.filter = []

        if (!v_nil(this.goods_state)) {
          switch(this.goods_state.value){
            case 4:
              this.filter.push({field: 'id', value: _.pluck(this.goods_files, 'owner_id')})
              break;
            case 3: 
              this.filter.push({field: 'fixed', value: true})
              break;
            case 2: 
              this.filter.push({field: 'order', value: true})
              this.filter.push({field: 'fixed', value: false})
              break;
            default:
              this.filter.push({field: 'order', value: false})
          }
        }

        for (i = 0; i < this.goods.length; ++i) { 
           let filtered = this.goods[i][1].filter(function (item) {
            for (q in vm.filter) {
              let f = vm.filter[q]
              if (Array.isArray(f.value)) {
                if (f.value.indexOf(item[f.field]) !== -1) return false
              } else {
                if (item[f.field] !== f.value) return false
              }
            }
            return true
          })

          grouped = _.groupBy(filtered, 'goods_priority_id')
          Vue.set(this.grouped, i, grouped);
        }

      },



      getProviderIndex(i, id){
        let ind = this.providers.filter(w => w.gt.id === toInt(i))
        return this.providers.indexOf(ind[0])
      },

      gtypeName(gt_id){
        gt = this.gtypes.filter(w => w.value === parseInt(gt_id))
        let name = gt.length>0 ? gt[0].label : 'Ошибка'
        return name
      },

      addControlAndField(){
        let h = {providers: null, gsum: 0}
        this.inputs.forEach( c => h[c] = '' );
        h.date_place = format_date();
        this.fields.push(h);
        this.controls.push({opened: false, openedAlt: false, valid: false});
      },

      addGoodsType(){
        if (!v_nil(this.new_gtype)){
          let new_gt = this.new_gtype.value
          $.ajax({
            type: "GET",
            url: "/goodstypes/"+new_gt+"/providers.json",
            dataType: "json",
            encode: true
          }).done(function(data) {
            NProgress.done();
            let new_gt = app.new_gtype.value
            // console.log("data", data)

            new_priority = app.new_gtype.priority
            new_index = 0
            app.gtypes.forEach( p => {
              if (p.priority < new_priority)  new_index = app.gtypes.indexOf(p);
              // console.log('new_priority', new_priority, 'p.priority', p.priority, 'new_index', new_index)
            } )
            
            if (new_index>0) new_index ++

            app.providers.splice(new_index, 0,{gt: {id: new_gt, name: app.new_gtype.label, priority: new_priority}, list: data})

            app.goods.splice(new_index, 0, [[app.new_gtype.value, app.new_gtype.label, new_priority], new Array()])
            app.gtypes.splice(new_index, 0, app.new_gtype)
            

            app.new_gtypes.splice(app.new_gtypes.indexOf(app.new_gtype), 1)          
            app.new_gtype = null 
            app.addControlAndField()
            app.makeFilter()
          });
        }
      },


      deleteGoods(index, goods){
        this.currentGoods = goods;
        this.currentIndex = index;
        this.confirmModal = true;
      },

      modalYes(){
        if (this.currentGoods === '' || !this.confirmModal ) return;
        let index = this.goods[this.currentIndex][1].indexOf(this.currentGoods);
        if (index < 0) return;
        this.goods[this.currentIndex][1].splice(index, 1);
        delete_item('/project_goods/'+this.currentGoods.id);
        this.makeFilter()
      },


      onChange(key, index){
        let valid = true;
        if (key === undefined) return;

        this.required.forEach( c => {if (v_nil(this.fields[index][c])) valid = false} );
        this.selects.forEach( c => {if (v_nil(app[c+'_'+key])) valid = false} );
        this.controls[index].valid = valid;  
        // console.log("onChange");
      },

      onInput(e){
        if (e === undefined) return;

        if (e.name === 'goods_priority' || e.name === 'goods_state') {
          this.makeFilter();
          return;
        }

        if (e.index === undefined) return;
        this.onChange(e.key, e.index);
      },

      addRow(){
        // console.log('#newGoods_'+this.currentIndex)
        setTimeout(()=>{$('#newGoods_'+this.currentIndex).click();},200);
        setTimeout(()=>{$('#upd_modal_name').focus();}, 400);
      },

      switchOpened(index, id){
        this.currentIndex = index
        this.controls[index].opened = !this.controls[index].opened
        if (id === undefined) id = this.goods[index][0][0]
        setTimeout(()=>{$('#goods_'+id+"_name").focus(); apply_mask();}, 300);
      },

      altClass(index){
        let cls = "altcut";
        if (!this.controls[index].openedAlt) cls = cls + ' cutted'
        return cls
      },

      switchOpenAlt(index){
        this.controls[index].openedAlt = !this.controls[index].openedAlt
      },

      openedOrHaveData(index, items, alt = false){
        let closed = this.closedTable(index)
        if (items === undefined) return !closed;
        let openAlt = alt ? this.altCount(this.grouped[index][2]) : true

        return (this.closedTable(index) || length>0) && openAlt; 
      },

      filteredOrHaveData(index){
        return v_nil(this.goods_state) || this.grouped[index][1] !== undefined
      },

      closedTable(index){
        if (this.controls[index] === undefined) {
          this.controls.push({opened: true, openedAlt: false, valid: false})
        }
        return !this.controls[index].opened;
      },

      openedAlt(index){
        return this.controls[index].openedAlt;
      },  

      altCount(g){
        if (g === undefined ) return 0;
        return g.length;
      },

      calculateTotal(){
        this.currencies.forEach( c => {  
          this.grandOrderTotal[c.value] = 0; 
          this.grandOfferTotal[c.value] = 0; 
          this.grandClosedTotal[c.value] = 0;

          for (var gt in this.offerAmount) {      
            this.grandOfferTotal[c.value] = this.grandOfferTotal[c.value] + this.offerAmount[gt][c.value]
            this.grandOrderTotal[c.value] = this.grandOrderTotal[c.value] + this.orderAmount[gt][c.value]
            this.grandClosedTotal[c.value] = this.grandClosedTotal[c.value] + this.closedAmount[gt][c.value]
          }
        })
        return this.formatTotal(this.grandOfferTotal);
      },

      calculateAmount(gt){
        this.offerAmount[gt] = {}
        this.orderAmount[gt] = {}
        this.closedAmount[gt] = {}

        this.currencies.forEach( c => {
          this.offerAmount[gt][c.value] = 0 
          this.orderAmount[gt][c.value] = 0
          this.closedAmount[gt][c.value] = 0
        })

        for (var gi in this.grouped[gt][1]){
            g = this.grouped[gt][1][gi]
            // console.log('gi', gi, g)
            c = g.currency_id
            this.offerAmount[gt][c] = this.offerAmount[gt][c] + parseInt(g.gsum)
            this.orderAmount[gt][c] = this.orderAmount[gt][c] + toInt(g.sum_supply)
            if (g.fixed)
              this.closedAmount[gt][c] = this.closedAmount[gt][c] + toInt(g.sum_supply)
        }

        if (this.offerAmount[gt] === undefined) return ""
        return this.formatTotal(this.offerAmount[gt])
      },

      goodsEditLink(g){
        // this.modalGoodsForm = true
        // return "/project_goods/" + g.id + "/edit"
      },

      openModalGoods(g) {
        // this.modalGoodsForm = true
      },

      onCancel() {
        console.log('onCancel')
        this.modalGoodsForm = false
      },

      goodsCreateLink(index){
        // console.log('this.goods[index]', this.goods[index])
        return "/project_goods/new?goodstype_id="+index+'&project_id='+this.project_id
      },
    }
  })

</script>