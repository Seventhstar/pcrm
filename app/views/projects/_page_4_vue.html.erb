<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.vue_app',
    data: <%= fill_vue_data(@project, {
      f_gt: true,

      confirmModal: false,
      currentIndex: 0,
      currentGoods: '',
      
      inputs: ['name', 'date_place', 'gsum', 'description'],
      required: ['name', 'date_place', 'gsum'],

      selects: ['provider', 'currency'],
      
      fields: [],
      controls: [],
      
      offerAmount: {},
      orderAmount: {},
      closedAmount: {},
      
      grandOfferTotal: [],
      grandOrderTotal: [],
      grandClosedTotal: [],
      
      texts: "gtype new_gtype id",
      lists: "gtypes new_gtypes currencies+short",

      providers: @providers,
      project_g_types: [],

      goods: @goods
     }, 'page4') %>,

    updated(){
      this.onInput();
    },

    beforeCreate(){

    },

    created(){
      this.gtypes.forEach(()=>this.addControlAndField())
      this.calculateTotal()
    },

    mounted(){
      this.$root.$on('onInput', this.onInput);
      this.$root.$on('modalYes', this.modalYes);
      document.body.addEventListener('keyup', e => {if (e.keyCode === 45) this.addRow(); });
    },

    methods: {

      getProviderIndex(i, id){
        // console.log("this.providers", this.providers[0].gt, i)
        let ind = this.providers.filter(w => w.gt.id === toInt(i))
            // console.log("w.gt.id", 
        // console.log("i", i, id, "ind", ind, this.providers.indexOf(ind[0]));
        return this.providers.indexOf(ind[0])
      },

      gtypeName(gt_id){
        gt = this.gtypes.filter(w => w.value === parseInt(gt_id))
        // console.log("gt_id", gt_id, gt)
        let name = gt.length>0 ? gt[0].label : 'Ошибка'
        return name
      },

      addControlAndField(){
        let h = {providers: null, gsum: 0}
        this.inputs.forEach( c => h[c] = '' );
        h.date_place = format_date();
        this.fields.push(h);
        this.controls.push({opened: false, valid: false});
      },

      addGoodsType(){
        if (!v_nil(this.new_gtype)){
          let new_gt = this.new_gtype.value
          $.ajax({
            type: "GET",
            url: "/goodstypes/"+new_gt+"/providers.json",
            dataType: "json",
            encode: true
          }).done(function(data) {
            NProgress.done();
            let new_gt = app.new_gtype.value
            // console.log("data", data)
            app.providers.unshift({gt: {id: new_gt, name: app.new_gtype.label }, list: data})
            app.goods.unshift([[app.new_gtype.value, app.new_gtype.label], new Array()])
            app.gtypes.unshift(app.new_gtype)
            app.new_gtypes.splice(app.new_gtypes.indexOf(app.new_gtype), 1)          
            app.new_gtype = null 
            app.addControlAndField()

          });
        }
      },

      saveGoods(key, index, g){
        if (!this.controls[index].valid) return;
        this.currentIndex = index
        // console.log("this.currentIndex", this.currentIndex)
        let pref = 'goods_'+key+'_';        
        let values = {currency_id: app.currency.value, project_id: this.id, goodstype_id: key }

        this.inputs.forEach(  c => values[c] = this.fields[index][c] );
        this.selects.forEach( c => values[c+'_id'] = app[c].value );

        $.ajax({
          type: "POST",
          url: "/project_goods/",
          data: {gt: values},
          dataType: "json",
          encode: true
        }).done(function(data) {
          NProgress.done();
          app.switchOpened(index);
          values['id'] = data.id;
          app.goods[index][1].push(values);
          app.selects.forEach( c => values[c+'_name'] = app[c].label );
          app.inputs.forEach( c => app.fields[index][c] = '' );
          app.fields[index].date_place = format_date();
          app.calculateAmount(index);
        });

      },

      clearFields(){
        
      },

      deleteGoods(index, goods){
        this.currentGoods = goods;
        this.currentIndex = index;
        this.confirmModal = true;
      },

      modalYes(){
        if (this.currentGoods === '' || !this.confirmModal ) return;
        let index = this.goods[this.currentIndex][1].indexOf(this.currentGoods);
        if (index<0) return;
        this.goods[this.currentIndex][1].splice(index, 1);
        delete_item('/project_goods/'+this.currentGoods.id);
      },

      onChange(key, index){
        let valid = true;
        let pref = 'goods_'+key+'_'; 

        this.required.forEach( c => {
          if (v_nil(this.fields[index][c])) {
            valid = false;
          } 
        });
            
        // console.log("c",c, "index", index);

        this.selects.forEach( c => {
          if (v_nil(app[c])) {
            valid = false;
            console.log('valid', valid, 'c', c, app[c]);
          }
        });
        console.log("valid", valid);
        this.controls[index].valid = valid;  
      },

      onInput(e){
        if (e === undefined || e.index === undefined) return;
        this.onChange(e.key, e.index);
      },

      addRow(){
        this.switchOpened(this.currentIndex);
      },

      switchOpened(index){
        this.currentIndex = index
        this.controls[index].opened = !this.controls[index].opened
      },

      openedOrHaveData(index, length){
        return !this.closedTable(index) || length>0; 
      },

      closedTable(index){
        if (this.controls[index] === undefined) {this.controls.push({opened: true, valid: false})}
        return !this.controls[index].opened;
      },

      format_date(date){
        return format_date(date);
      },

      v_nil(v){
        return v_nil(v);
      },

      formatTotal(amountArray){
        let string = ""
        if (amountArray === undefined) return ""
        this.currencies.forEach( c => {
          amount = amountArray[c.value];
          if (amount > 0) {string = string + to_sum(amount) + " " + c.short + ", "}
        })
        return string.slice(0, -2)
      },

      calculateTotal(){
        this.currencies.forEach( c => {  
          this.grandOrderTotal[c.value] = 0; 
          this.grandOfferTotal[c.value] = 0; 
          this.grandClosedTotal[c.value] = 0;

          for (var gt in this.offerAmount) {      
            this.grandOfferTotal[c.value] = this.grandOfferTotal[c.value] + this.offerAmount[gt][c.value]
            this.grandOrderTotal[c.value] = this.grandOrderTotal[c.value] + this.orderAmount[gt][c.value]
            this.grandClosedTotal[c.value] = this.grandClosedTotal[c.value] + this.closedAmount[gt][c.value]
          }
        })
        return this.formatTotal(this.grandOfferTotal);
      },

      calculateAmount(gt){
        this.offerAmount[gt] = {}
        this.orderAmount[gt] = {}
        this.closedAmount[gt] = {}

        this.currencies.forEach( c => {
          this.offerAmount[gt][c.value] = 0 
          this.orderAmount[gt][c.value] = 0
          this.closedAmount[gt][c.value] = 0
        })

        for (var gi in this.goods[gt][1]){
            g = this.goods[gt][1][gi]
            c = g.currency_id
            this.offerAmount[gt][c] = this.offerAmount[gt][c] + parseInt(g.gsum)
            this.orderAmount[gt][c] = this.orderAmount[gt][c] + toInt(g.sum_supply)
            if (g.fixed)
              this.closedAmount[gt][c] = this.closedAmount[gt][c] + toInt(g.sum_supply)
        }

        if (this.offerAmount[gt] === undefined) return ""
        return this.formatTotal(this.offerAmount[gt])
      },

      allAmount(g){
        offer = g.gsum > 0 ? g.gsum : ''
        hasOrder = g.order && g.sum_supply != g.gsum
        offer = hasOrder ? "<span class='striked'>" + to_sum(offer) + '</span>' : to_sum(offer)
        order = hasOrder ? "<br>" + to_sum(g.sum_supply) : ''
        return offer + order
      },

      rowClass(g){

        if (g.fixed)
          cls = "fixed"
        else if (g.sum_supply>0)
          cls = "ordered" 
        else
          cls = "placed"
        
        return "grid_table_goods grid_table sw_color " + cls
      },

      goodsEditLink(g){
        return "/project_goods/" + g.id + "/edit"
      },

      goodsDeleteLink(g){
        return "/project_goods/" + g.id 
      }

      
    }
    })

</script>