<script>
  Vue.component('v-select', VueSelect.VueSelect)
  
  let footages = new Vue({
    el: '.prj_footage',
    data: <%= fill_vue_data(@project,
    {
      focus: '',
      formValid: false,
      model: "project",
      
      project_id: @project.id,
      project_type_id: @project.project_type&.id,
      projectTypeOutChange: false,  

      city_id: @project.city_id,

      mTarif: 0,
      tarifs: @tarifs,
      m_sum_total: 0,
      calcType: 0,

      mPriceIsTotal: false,
      mPriceForFootage: false,
      mHasVisualer: false,
      mDependsFromFootage: false,
      mPriceByPercent: false,

      show_fact:    @project.footage_real>0,
      fact_filled:  @project.footage_real>0,

      mFootage: 0,
      mFootage2: 0,

      days: 1,
      dateStart: @date_start,
      dateEnd: @date_end,
      holidays: @holidays,
      workdays: @workdays,

      formFields: "footage price",
      noteValid: "tooltip",

      contacts: [],
      f_contact: false,
      tarifTooltips: {sum: 'fhwge sum', designer_price: 'ntshjhfg designer_price'},
      
      required: ['project_type', 'executor', 'address'],
      fieldsTranslated: ['тип проекта', 'дизайнер', 'адрес'],

      lists: "clients cities executors visualers project_types+simple contacts+id,val,who",
      list_values: "client city project_type",

      texts: "address comment executor lead client_name phone email\
      footage price sum sum_total\
      footage_2 price_2 sum_2\
      footage_real price_real sum_real sum_total_real \
      footage_2_real price_2_real sum_2_real\
      designer_price designer_price_2 designer_sum\
      visualer_price visualer_sum sum_total_executor\
      sum_rest \
      new_val new_who",

      booleans: 'toggled isNewProject'
    },
    'page2') %>,

    created() {
      // this.tarifSelect()
      // this.
      
      this.projectTypeSelect(false)
      this.calcSumExecutor()
      this.calcTotal()
      this.$root.$on('onInput', this.onInput)
    },

    computed: {
      showFootage2(){
        return this.designer_price_2 > 0 || this.price_2 > 0
      }
    },


    watch: {
      footage() {
        this.calcSum("footage", "price")
        this.projectTypeSelect()
      },

      footage_2() {
        this.calcSum("footage_2", "price_2", "sum_2")
        this.calcSumExecutor(true)
      },

      footage_real() {
        this.fact_filled = this.footage_real>0;
        if (toInt(this.price_real) === 0 ) this.price_real = this.price;
        this.calcSum("footage_real", "price_real", "sum_real")

      }, 

      footage_2_real() {
        if (toInt(this.price_2_real) === 0 ) this.price_2_real = this.price_2;
        this.calcSum("footage_2_real", "price_2_real", "sum_2_real")
      },

      price() {
        this.calcSum("footage", "price")
      },

      price_2() {
        this.calcSum("footage_2", "price_2", "sum_2")
      },

      price_real() {
        this.calcSum("footage_real", "price_real", "sum_real")
      },

      price_2_real() {
        this.calcSum("footage_2_real", "price_2_real", "sum_2_real")
      },

      new_who() {
        this.onInput()
      },

      new_val() {
        this.onInput()
      },

      sum() {
        this.calcPrice()
        this.calcTotal()
      },
      
      sum_2() {
        this.calcPrice("_2")
        this.calcTotal()
      },

      sum_total(force = false) {
        if (this.focus.includes('total') || force) {
          if (this.mPriceIsTotal)
            this.m_sum_total = this.sum_total;
          else 
            this.m_sum_total = parseInt(this["sum"]) + parseInt(this["sum_2"])
          if (this.mPriceByPercent) this.calcSumExecutor(true)
        }
        this.calcRest()
      },

      designer_price() {
        this.calcSumExecutor()
      },

      designer_sum() {
        if (this.focus.includes('sum') && this.calcType > 1) this.designer_price = this.designer_sum

        this.sum_total_executor = this.designer_sum
        this.calcRest()
      },

      designer_price_2() {
        this.calcSumExecutor()
      },

      visualer_price() {
        this.calcSumExecutor()
      },

      dateStart() {
          // this.calcDays();
      },

      dateEnd() {
        // this.calcDays();
      },

      days() {
        let dd = setDateEnd(this.days - 1)
        this.calcSumExecutor()
      },

      project_type() {
        this.clearAllCalculation()        
        setTimeout(() => {apply_mask()}, 300)
        this.projectTypeSelect()

        <% if (controller.action_name != 'new') %>
        if (!this.projectTypeOutChange && ptype!=undefined && ptype.project_type_id > 0) {
          ptype.setProjectType(this.project_type)
        }
        <% end %>

        this.projectTypeOutChange = false
        
      },
    },

    methods: {

      setProjectType(pt) {
        this.projectTypeOutChange = true
        this.project_type = pt
      },

      setCity(city) {
        this.city = city
        this.tarifSelect()
        this.projectTypeSelect()
      },

      clearAllCalculation() {
        this.price_2 = 0
        this.designer_price  = 0
        this.designer_price_2 = 0
        this.visualer_price  = 0

        this.sum_total = 0
        this.m_sum_total = 0
        this.designer_sum = 0

        this.mHasVisualer = false
        this.mPriceIsTotal = false
        this.mPriceByPercent = false
        this.mPriceForFootage = false
        this.mDependsFromFootage = false

        this.tarifTooltips.sum = ''
      },

      tarifSelect() {
        let locPrice = 0
        let locPrice2 = 0
        let locPriceReal = 0
        let locPrice2Real = 0 
        let locDesignerPrice = 0
        let locDesignerPrice2 = 0
        let locVisualerPrice = 0
        let locSumTotal = 0



        if (this.price > 0) locPrice = this.price
        if (this.price_2 > 0) locPrice2 = this.price_2
        if (this.price_real > 0) locPriceReal = this.price_real
        if (this.price_2_real > 0) locPrice2Real = this.price_2_real


        if (this.sum_total > 0) locSumTotal = this.sum_total
        if (this.designer_price > 0) locDesignerPrice = this.designer_price
        if (this.designer_price_2 > 0) locDesignerPrice2 = this.designer_price_2
        if (this.visualer_price > 0) locVisualerPrice = this.visualer_price

        this.clearAllCalculation()

        let find = v_nil(this.project_type) ? undefined : this.project_type.value
        if (find == undefined) find = this.project_type_id

        let tarif_search = this.tarifs.filter(t => t.city_id == this.city.value && t.project_type_id == find)
        tarif_search = _.sortBy(tarif_search, 'from')

        this.tarifTooltips.sum = ''
        if (tarif_search.length > 0) {
          tarif_search.forEach( (c, i) => { 
            this.tarifTooltips.sum = this.tarifTooltips.sum + 'от ' + c.from + ' м2 = ' + toSum(c.sum) + 'р.\n'
          })
        }

        tarif_search = tarif_search.filter(t => toInt(t.from) <= this.footage).reverse()
        if (tarif_search.length) this.mTarif = tarif_search[0]
        if (this.mTarif != 0) this.calcType = this.mTarif.tarif_calc_type_id
        // console.log('this.project_type.value', this.project_type.value, this.project_type_id)

        if(this.project_type != undefined)
          if(this.project_type.value == this.project_type_id){
          // console.log('this.price', this.price, 'this.mTarif.tarif_calc_type_id', this.mTarif.tarif_calc_type_id);
            if (this.mTarif.tarif_calc_type_id > 1) {
              if (locSumTotal > 0) this.mTarif.sum = locSumTotal
            } else {
              if (locPrice > 0) this.price = locPrice
              if (locPriceReal > 0) this.price_real = locPriceReal
              if (locPrice2 > 0) this.price_2      = locPrice2
              if (locPrice2Real > 0) this.price_2_real = locPrice2Real
            }

            if (locDesignerPrice > 0) this.designer_price = locDesignerPrice
            if (locDesignerPrice2 > 0) this.designer_price2 = locDesignerPrice2
            if (locVisualerPrice > 0) this.visualer_price = locVisualerPrice
           // console.log('designer_sum', this.designer_sum, 'visualer_price', this.visualer_price, locVisualerPrice)
          } else {
            this.project_type_id = this.project_type.value
          }

      },
    priceTitle(m2) {
      priceM2 = m2 ? "2" : ""
      return 'Цена по умолчанию: ' + this.mTarif['sum'+priceM2]
    },

    priceChanged(real, m2) {

      priceReal = real ? "_real" : ""
      priceM2 = m2 ? "_2" : ""
      sumM2 = m2 ? "2" : ""
      priceAdd = "price" + priceM2 + priceReal

      // console.log(m2, 'm2', typeof(m2), 'real', real,  this.price, toInt(this.price), this.mTarif.sum)
      // console.log("priceAdd", "price"+priceAdd, "sum+sumM2+priceReal", "sum"+sumM2+priceReal)
      if (toInt(this[priceAdd]) != toInt(this.mTarif["sum"+sumM2])) return "changed-by-hand "

      return priceReal

    },

    tarifTooltip() {

    },

    projectTypeSelect(force = true) {
      this.tarifSelect()
      if (this.mTarif != 0){
        
          if (this.calcType > 1) { // в месяц
            this.sum_total        = this.mTarif.sum
            this.m_sum_total      = this.sum_total

            if (this.mTarif.designer_price > 0 && this.mTarif.designer_price < 1) this.mPriceByPercent = true    
            this.mPriceIsTotal = true
            
            if (this.mTarif.from > -1) this.mDependsFromFootage = true
          } else { // за м2
            this.mPriceForFootage = true
            if (force) {
              this.price            = this.mTarif.sum
              this.price_2          = this.mTarif.sum2
              this.price_real       = this.mTarif.sum
              this.price_2_real     = this.mTarif.sum2

              this.designer_price   = this.mTarif.designer_price
              this.designer_price_2 = this.mTarif.designer_price2
              this.visualer_price   = this.mTarif.vis_price
            } 
            this.mHasVisualer     = (this.visualer_price > 0)
          } 
          this.calcTotal()
          this.calcSumExecutor(force)
        }
      },

      onInput(e){
        let valid = true;
        let f_contact = true;

        if (v_nil(this.new_who)) f_contact = false;
        if (v_nil(this.new_val)) f_contact = false;

        let tooltip = "";
        this.required.forEach( (c, i) => {
          if (v_nil(this[c])) {
            valid = false;
            tooltip = tooltip + this.fieldsTranslated[i] + ', ';
          }
        });

        if (v_nil(this.client) && v_nil(this.client_name)) {
          valid = false;
          tooltip = tooltip + 'клиент, ';
        }
        
        this.formValid = valid;
        if (tooltip.trim().length > 0) tooltip = "Не заполнены поля: " + tooltip.slice(0, -2);
        this.noteValid = tooltip;

        this.f_contact = f_contact;
      },

      calcDays(){
        d1 = dateFromString(this.dateStart)
        d2 = dateFromString(this.dateEnd)
        this.days = moment().isoWeekdayCalc(d1, d2, [1,2,3,4,5], holidays, workdays)
      },

      onSubmit(event){
        if (event && !this.formValid) {
          event.preventDefault();
          show_ajax_message(this.noteValid, 'error');
        }
      },

      addContact(){
        this.contacts.push({who: this.new_who, val: this.new_val, _destroy: false})
        this.new_who = ''
        this.new_val = ''
        $('#contacts_val').focus()
      },

      delContact(index){
        Vue.set(this.contacts[index], '_destroy', true)
      },

      nameField(index, field) {
        return "project[contacts_attributes]["+index+"]["+field+']'
      },

      delReal(){
        this.show_fact = false
        this.price_real = 0 
        this.footage_real = 0
        this.price_2_real = 0 
        this.footage_2_real = 0
        this.sum_total_real = 0
        this.fact_filled = false
      },

      mFloat(name){
        return parseInt(this[name] * 100) / 100;
      },

      mFloat10000(name){
        return parseInt(this[name] * 10000);
      },

      calcSum(footage, price, sum = "sum"){
        if (!this.focus.includes('sum')){
          this[sum] = this.mFloat10000(footage) * parseInt(this[price]) / 10000;
        }

        if (this.focus.includes('real')) 
          this.calcTotal("_real");
        else
          this.calcTotal();
        
      },

      calcTotal(real = ""){
        if (!this.focus.includes('sum_total') && this.calcType == 1) {           

          this["sum_total"+real] = toInt(this["sum"+real]) + toInt(this["sum_2"+real]);

          if (this.sum_total_real > 0)
            this.m_sum_total = this.sum_total_real;
          else 
            this.m_sum_total = this.sum_total;
        }

        this.calcRest();
      },

      calcPrice(num = ""){
        if (this.calcType > 1) return
        if (this.focus.includes('sum')){
          this["price"+num] = this.mFloat("sum"+num) / toInt(this["footage"+num]);
        }
      },

      checkFootages(){
        this.mFootage = this.mFloat("footage_real")
        if (this.mFootage >0){
          this.mFootage2 = this.mFloat("footage_2_real")
        } else {
          this.mFootage = this.mFloat("footage")
          this.mFootage2 = this.mFloat("footage_2")
        }
      },

      calcSumExecutor(byDefault = false){
        this.checkFootages()
        // console.log('this.calcType', this.calcType, 'this.focus', this.focus, byDefault)

        if (this.calcType > 1) {
          if (byDefault){
            this.designer_price = this.mTarif.designer_price
            if (this.mPriceByPercent) this.designer_price *= this.sum_total
          }
          this.designer_sum = this.designer_price
          this.sum_total_executor = this.designer_sum
        } else {
          // if (byDefault){
          if (this.focus.includes('price') || this.designer_sum == 0) {
            this.designer_sum = toInt(this.designer_price) * this.mFootage + 
            toInt(this.designer_price_2) * this.mFootage2;
            this.visualer_sum = this.visualer_price * this.mFootage;
          }
          // }
          this.sum_total_executor = this.designer_sum + this.visualer_sum;
        }
        this.calcRest()
      },

      calcRest(){
        this.sum_rest = this.m_sum_total - toInt(this.sum_total_executor);
      }
    }
  });

</script>