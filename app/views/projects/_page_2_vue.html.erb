<script>
  Vue.component('v-select', VueSelect.VueSelect)
  
  let footages = new Vue({
    el: '.prj_footage',
    data: <%= fill_vue_data(@project,
     {
      focus: '',
      formValid: false,
      model: "project",
      project_id: @project.id,

      mTarif: 0,
      tarifs: @tarifs,
      m_sum_total: 0,
      mByMonthAmount: 0,

      show_2:       @project.,
      show_fact:    @project.footage_real>0,
      fact_filled:  @project.footage_real>0,

      mFootage: 0,
      mFootage2: 0,

      days: 1,
      dateStart: @date_start,
      dateEnd: @date_end,
      holidays: @holidays,
      workdays: @workdays,

      formFields: "footage price",
      noteValid: "tooltip",

      contacts: [],
      f_contact: false,
      
      required: ['project_type', 'executor', 'address'],
      fieldsTranslated: ['тип проекта', 'дизайнер', 'адрес'],

      lists: "clients cities executors visualers project_types+simple contacts+id,val,who",
      list_values: "client ",

      texts: "address comment project_type executor lead client_name phone email\
              footage price sum sum_total\
              footage_2 price_2 sum_2\
              footage_real price_real sum_real sum_total_real \
              footage_2_real price_2_real sum_2_real\
              designer_price designer_price_2 designer_sum\
              visualer_price visualer_sum sum_total_executor\
              sum_rest \
              new_val new_who",

      booleans: 'toggled isNewProject'
    },
    'page2') %>,

    created() {


      // if (!this.isNewProject && ptype.project_type !==undefined 
                             // && ptype.project_type.value!== undefined ){
        // currentPType = this.project_types.find(e => e.value == ptype.project_type.value)
        // if (currentPType !== undefined)
          // this.complexProjectType = !currentPType.simple
      // }

      // if (this.complexProjectType){
        // if (this.sum_total_real > 0) 
          // this.m_sum_total = this.sum_total_real
        // else
      this.m_sum_total = parseInt(this["sum"]) + parseInt(this["sum_2"])
      // }
      // else
        // this.m_sum_total = this.sum_total

      this.calcSumExecutor();
      this.calcRest();
      this.$root.$on('onInput', this.onInput);
    },

    updated(){
      //console.log("updated");
    },

    mounted(){

    },

    computed: {
      complexProjectType(){
        return this.visualer_price>0
      },

      showFootage2(){
        return this.designer_price_2 > 0 || this.price_2 > 0
      }
    },

    watch: {
      footage(){
        this.calcSum("footage", "price")
        this.projectTypeSelect()
        this.calcSumExecutor(true)
      },

      footage_2(){
        this.calcSum("footage_2", "price_2", "sum_2")
        this.calcSumExecutor(true)
      },

      footage_real(){
        this.fact_filled = this.footage_real>0;
        if (toInt(this.price_real) === 0 ) this.price_real = this.price;
        this.calcSum("footage_real", "price_real", "sum_real")

      }, 
      footage_2_real(){
        if (toInt(this.price_2_real) === 0 ) this.price_2_real = this.price_2;
        this.calcSum("footage_2_real", "price_2_real", "sum_2_real")
      },


      price(){
        this.calcSum("footage", "price")
      },
      price_2(){
        this.calcSum("footage_2", "price_2", "sum_2")
      },
      price_real(){
        this.calcSum("footage_real", "price_real", "sum_real")
      },
      price_2_real(){
        this.calcSum("footage_2_real", "price_2_real", "sum_2_real")
      },

      new_who(){
        this.onInput();
      },

      new_val(){
        this.onInput();
      },

      sum(){
        this.calcPrice();
        this.calcTotal();
      },
      
      sum_2(){
        this.calcPrice("_2");
        this.calcTotal();
      },

      sum_total(){
        if (this.focus.includes('total')){
          // if (this.complexProjectType)
            this.m_sum_total = parseInt(this["sum"]) + parseInt(this["sum_2"]);
          // else 
            // this.m_sum_total = this.sum_total;
        }
        this.calcRest();
      },

      designer_price(){
         this.calcSumExecutor();
      },

      designer_price_2(){
        this.calcSumExecutor();
      },

      visualer_price(){
        
        this.calcSumExecutor();
      },
      
      dateStart(){
        // this.calcDays();
      },

      dateEnd(){
        // this.calcDays();
      },

      days(){
        let dd = setDateEnd(this.days - 1)
        this.calcAmountByMonth()
        this.calcSumExecutor()
      },

      project_type(){
        this.footage = 0;
        this.show_2  = false;
        setTimeout(() => {apply_mask()}, 300);
        this.projectTypeSelect();        
      },

    },
    methods: {

      projectTypeSelect(){

        this.designer_price  = 0
        this.designer_price_2 = 0
        this.visualer_price  = 0

        this.sum_total = 0
        this.m_sum_total = 0
        this.designer_sum = 0
        this.mByMonthAmount = 0

        let tarif_search = this.tarifs.filter(t => t.project_type_id == this.project_type.value && toInt(t.from) <= this.footage)
        // console.log('tarif_search', tarif_search, 'project_type_id', this.project_type.value);
        tarif_search = _.sortBy(tarif_search, 'from').reverse();
        if (tarif_search.length){
          this.mTarif = tarif_search[0]


          if (this.mTarif.tarif_calc_type_id >1 ){ // в месяц
            this.sum_total       = this.mTarif.sum
            this.m_sum_total     = this.sum_total
            if (this.mTarif.tarif_calc_type_id == 2) this.mByMonthAmount  = this.mTarif.sum
            this.designer_price  = this.mTarif.designer_price * this.sum_total

          } else { // за м2
            this.price            = this.mTarif.sum
            this.designer_price   = this.mTarif.designer_price
            this.designer_price_2 = this.mTarif.designer_price2
            this.visualer_price   = this.mTarif.vis_price
            if (this.mTarif.sum2>0) this.addFootage2()
          } 

          this.calcAmountByMonth()
          this.calcSumExecutor(true)
        }
      },

      onInput(){
        // console.log('input')
        let valid = true;
        let f_contact = true;

        if (v_nil(this.new_who)) f_contact = false;
        if (v_nil(this.new_val)) f_contact = false;

        let tooltip = "";
        this.required.forEach( (c, i) => {
          if (v_nil(this[c])) {
            valid = false;
            tooltip = tooltip + this.fieldsTranslated[i] + ', ';
          }
        });

        if (v_nil(this.client) && v_nil(this.client_name)) {
          valid = false;
          tooltip = tooltip + 'клиент, ';
        }
        
        this.formValid = valid;
        if (tooltip.trim().length > 0) tooltip = "Не заполнены поля: " + tooltip.slice(0, -2);
        this.noteValid = tooltip;

        this.f_contact = f_contact;
      },

      calcDays(){
        d1 = dateFromString(this.dateStart)
        d2 = dateFromString(this.dateEnd)
        this.days = moment().isoWeekdayCalc(d1, d2, [1,2,3,4,5], holidays, workdays)
      },

      monthDiff() {
        let months;
        let d1 = dateFromString($('#project_date_start').val())
        let d2 = dateFromString($('#project_date_end_plan').val())
        let dd = d2.getDate() - d1.getDate()
        months = (d2.getFullYear() - d1.getFullYear()) * 12;
        months += d2.getMonth() - d1.getMonth();
        if (dd > 1) months +=1;
        return months <= 0 ? 1 : months;
      },

      calcAmountByMonth(){
        // console.log('mByMonthAmount', this.mByMonthAmount, this.monthDiff())
        if (this.mByMonthAmount === 0) return
        this.m_sum_total = this.mByMonthAmount * this.monthDiff()
        this.sum_total = this.m_sum_total;
        // console.log('this.m_sum_total', this.m_sum_total, 'this.sum_total', this.sum_total)
      },

      onSubmit(event){
        if (event && !this.formValid) {
          event.preventDefault();
          show_ajax_message(this.noteValid, 'error');
        }
      },

      addFootage2(){
        this.show_2 = true
        // console.log('this.mTarif', this.mTarif)
        this.designer_price_2 = this.mTarif.designer_price2
        this.price_2          = this.mTarif.sum2
      },

      delFootage2(){
        this.show_2 = false
        this.footage_2 = 0 
        this.price_2 = 0
        this.sum_2 = 0
      },

      addContact(){
        this.contacts.push({who: this.new_who, val: this.new_val, _destroy: false})
        this.new_who = ''
        this.new_val = ''
        $('#contacts_val').focus()
      },


      delContact(index){
        Vue.set(this.contacts[index], '_destroy', true)
      },

      nameField(index, field) {
        return "project[contacts_attributes]["+index+"]["+field+']'
      },

      delReal(){
        this.show_fact = false
        this.price_real = 0 
        this.footage_real = 0
        this.price_2_real = 0 
        this.footage_2_real = 0
        this.sum_total_real = 0
        this.fact_filled = false
      },

      mFloat(name){
        return parseInt(this[name] * 100) / 100;
      },

      mFloat10000(name){
        return parseInt(this[name] * 10000);
      },

      calcSum(footage, price, sum = "sum"){
        if (!this.focus.includes('sum')){
          this[sum] = this.mFloat10000(footage) * parseInt(this[price]) / 10000;
        }

        if (this.focus.includes('real')) 
          this.calcTotal("_real");
        else
          this.calcTotal();
        
      },

      calcTotal(real = ""){
        if (!this.focus.includes('sum_total')){           
          this["sum_total"+real] = toInt(this["sum"+real]) + toInt(this["sum_2"+real]);

          if (this.sum_total_real > 0)
            this.m_sum_total = this.sum_total_real;
          else 
            this.m_sum_total = this.sum_total;
        }

        this.calcRest();
      },

      calcPrice(num = ""){
        if (this.focus.includes('sum')){
          this["price"+num] = this.mFloat("sum"+num) / toInt(this["footage"+num]);
        }
      },

      checkFootages(){
        this.mFootage = this.mFloat("footage_real")
        if (this.mFootage >0){
          this.mFootage2 = this.mFloat("footage_2_real")
        } else {
          this.mFootage = this.mFloat("footage")
          this.mFootage2 = this.mFloat("footage_2")
        }
      },

      calcSumExecutor(byDefault = false){
        this.checkFootages();

        if (this.mTarif.tarif_calc_type_id > 1) {
          if (byDefault) this.designer_price = this.mTarif.designer_price * this.sum_total
          this.designer_sum = this.designer_price
          this.sum_total_executor = this.designer_sum
          // this.calcAmountByMonth();
        } else {
          if (byDefault){
            this.designer_sum = toInt(this.designer_price) * this.mFootage + 
                                 toInt(this.designer_price_2) * this.mFootage2;
            this.visualer_sum = this.visualer_price * this.mFootage;
          }

        this.sum_total_executor = this.designer_sum + this.visualer_sum;
        }

        this.calcRest();
      },

      calcRest(){
        this.sum_rest = this.m_sum_total - toInt(this.sum_total_executor);
      }
     }
  });

</script>