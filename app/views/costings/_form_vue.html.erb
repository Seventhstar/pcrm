<script>

  Vue.component('v-select', VueSelect.VueSelect)
  // Vue.use(require('vue-resource'));
  
  let app = new Vue({
  el: '#costing_app',
  data: <%= fill_vue_data(@costing,
    { 
      room_works: @room_works,
      costing_id: @costing.id,
      costingsWorks: @costing_works,
      modalForm: false,
      model: 'costing',
      texts: 'room work qty price',
      list_values: 'user costings_type',
      lists: "rooms works costings_types costingsRooms:@costings_rooms+room_id \
              tabs:@costings_rooms+room_id users modalRooms:@costings_rooms+room_id modalWorks:@works+uom",
      worksHeaders: ['№ этапа', 'Вид работы', 'Ед.изм', 'Кол-во', 'Цена', 'Ст-ть работ',
                     'Материал (необходимый для выполнения работы)', 
                     'Ед.изм', 'Кол-во', 'Цена', 'Ст-ть работ'],

      worksColumns: ['step', 'work', 'uom', 'qty', 'price', 'amount'],
      materialColumns: ['material', 'uom', 'qty', 'price', 'amount'],

      tabs: [],

    })%>,

  mounted() {
    this.$root.$on('onInput', this.onInput);
    document.body.addEventListener('keyup', e => {
      switch(e.keyCode){
        case 27: this.onCancel(); break;
        case 13: this.onConfirm(); break;
        case 45: this.addWork(); break;
      }             
    })
    this.setActive(this.tabs[0]);
  },

  computed: {
    currentTab: function () {
      return this.tabs.reduce((accum, curr) => {return curr.active ? curr : accum}, {});
    },

    uomName(){
      // console.log('computed uomName')
      if (v_nil(this.modalWork)) return ""
      return this.modalWork.uom.name
    },

    amount(){
      return this.qty * this.price;
    } 

  },

  watch: {
    modalWork(){
      // console.log('watch modalWork')
    },

    footage(){
      // this.calcAmount()
      // console.log('watch footage')

    },

  },


  methods: {
    v_nil(v){
      return v_nil(v);
    },

    showWork(item){
      console.log('item', item);
    },
    
    addRoom(){
      if (v_nil(this.room)) { show_ajax_message('Выберите помещение', 'error'); return; }
      this.tabs.push({label: this.room.label, active: this.tabs.length === 0 ? true : false})
      this.costingsRooms.push({label: this.room.label, room_id: this.room.value})
      this.rooms.splice(this.rooms.indexOf(this.room), 1)
      this.room = null
    },

    addWork(){
      this.modalForm  = true
      this.modalTitle = 'Новая работа'
    },

    onInput(e){
      // console.log('onInput', e)
      // if (e.name == 'modalWork') this.uomName = this.getUomName()
    },

    onCancel(){
      this.modalForm = false
    },

    onConfirm(){
      let par = { costing_id: this.costing_id, room: this.modalRoom, 
                        work: this.modalWork, price: this.price,
                         qty: this.qty,      amount: this.amount, 
                    _destroy: false }

      this.costingsWorks.push(par)
      this.modalForm = false

      this.$http.post('/ajax/add_work', par)
          .then(response => {
              // Turbolinks.visit(`/teams/${response.body.id}`)
              console.log(response)
          }, response => {
            console.log(response)
          })

    },

    close(){
      // console.log('close modal')
      this.modalForm = false
    },

    tabClass(tab){
      // console.log('tabClass', tab)
      if (tab.active) return 'ui-tabs-active'
      return ''
    // {'ui-tabs-active': tab.active}
    },

    setActive(tab) {
      this.tabs.forEach((el,ind) => {Vue.set(this.tabs[ind], 'active', el === tab)})
    },

    _field(index, field, name = 'works') {
      return "costing["+name+"_attributes]["+index+"]["+field+']'
    },

  },

});
  

</script>