<script>
  Vue.component('v-select', VueSelect.VueSelect)
  Vue.component('Vue2Storage', Vue2Storage.Vue2Storage)

  Vue.use(Vue2Storage, {
    prefix: 'absence_',
    driver: 'local',
    ttl: 60 * 60 * 24 * 1000 // 24 часа
  })

  let app = new Vue({
    el: '.page-wrapper', 
    mixins: [m_created, m_index, mCheck],
    data: <%= fill_vue_data(nil, { 
      sortKey: 'name',
      controller: 'absences',
      reverse: true,
      currentIndex: -1,
      currentMonth: -1,
      confirmModal: false,
      readyToChange: false,
      groupHeaders: [],
      filter: [],
      mainFilters: ['city', 'year'],
      filtersAvailable: ['search', 'reason', 'user'],
      grouped: [],
      opened: [],
      groupKeys: [],
      showTotal: false,    
      filteredData: [],
      users: [],
      filteredGoodstypes: [],
      useSearchVue: true,
      texts: 'search',
      searchFileds: ['project_name'],
      list_values: 'user reason year city',
      lists: "mainList:raw@json_absences all_users+city_id reasons years cities",
      params: @params,
      columns: [['dt_from', 'Дата с'], 
      ['dt_to', 'Дата по'], 
      ['user', 'Сотрудник'],
      ['reason', 'Причина'], 
      ['project_name', 'Адрес проекта/объекта'],
      ['time_from', 'С'], ['time_to', 'По'] ]
      
    }) %>,

      // filtersAvailable: ['year', 'search', 'reason', 'user', 'city'],
    mounted() {
      // if (localStorage.user){
        // this.user = localStorage.user
      // }
    },

    created() {
      // this.city = this.main_city

      // this.$on('yearChanged', function(e) {
        // console.log('yearChanged', e);
      // });
      
      // console.log('this.$storage.keys()', this.$storage.keys())
      // console.log('this.filtersAvailable', this.filtersAvailable)
      // console.log('this.params', _.reject(_.keys(this.toHash(this.params)), 'year'))
      // console.log('this.years', this.years) 
      // console.log('this.cities', this.cities) 
        // console.log('f', f)
      this.mainFilters.forEach( f => {this.filtersFromParamsOrStoarge(f)})

      // delay("app.readyToChange = true", 300)
      setTimeout(() => {app.applyFilters()}, 50 )


      // this.onCityChange()  

      // this.filtersAvailable.forEach( f => {
      //   this.setFilterValue(f, this.$storage.get(f)) 
      // })
      // this.params.forEach( p => {
      //   console.log('params', p.label, p.value)
      //   this.setFilterValue(p.label, p.value)
      // })
      // this.readyToChange = true
    },

    watch: {
      city(newValue){
        this.onCityChange(newValue)
      },

      search(newValue){
        localStorage.search = this.search
      },


    },

    methods: {
      applyFilters() {
        this.readyToChange = true
        this.filtersAvailable.forEach(f => {this.filtersFromParamsOrStoarge(f)})
      },

      filtersFromParamsOrStoarge(filterName) {
        let value = undefined
        if (this.params[filterName] != undefined) value = this.params[filterName]
        else if (this.$storage.get(filterName)) value = this.$storage.get(filterName)
        else if (localStorage[filterName]) value = localStorage[filterName]

        if (value) {
          this.setFilterValue(filterName, value)          
        }

      },

      toHash(array){
        var result = {};
        for (var i = 0; i < array.length; i++) {
          result[array[i].label] = array[i].value;
        }
        return result
      },


      onCityChange(v) {
        if (typeof(v) != "object") return
        this.users.length = 0

        let users = this.all_users.filter(f => f.city_id == v.value)
        users.forEach(u => this.users.push(u))
        // console.log('onCityChange()', v.value, this.users)

        this.fillFilter(':user', _.pluck(this.users, 'label'))
      },
      
      switchOpenedRow(ind, i) {
        Vue.set(this.opened[ind], i, !this.opened[ind][i])
      },

      cutRowClass(index, idx){
        let cls = 'altcut'
        if (!this.opened[index][idx]) cls = cls + ' cutted'
        return cls
      },

      rowClass(item, index, name = 'head', add = '') {
        addClass = ''
        switch(item.p_status) {
          case 5:
          addClass = " info"
          break;
          case 2:
          addClass = " nonactual"
          break;
        }
        return "absences_index_" + name + " table_row" + addClass + " " + add
      },

      siteUrl(url){
        var prefix = 'http://';
        var pref2  = 'https://';
        if (url.substr(0, prefix.length) !== prefix && url.substr(0, pref2.length) !== pref2) { 
          url = prefix + url;
        }
        return url;
      },

      editGroup(grp){
        return '/absences/'+grp.id+'/edit'
      }


    }

  })
</script>