<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.absences_index', 
    mixins: [m_created, m_index, mCheck],
    data: <%= fill_vue_data(nil, { 
      sortKey: 'name',
      controller: 'absences',
      reverse: true,
      currentIndex: -1,
      currentMonth: -1,
      confirmModal: false,
      readyToChange: false,
      groupHeaders: [],
      filter: [],
      filtersAvailable: ['year', 'search', 'reason', 'user', 'city'],
      grouped: [],
      opened: [],
      groupKeys: [],
      showTotal: false,    
      filteredData: [],
      users: [],
      filteredGoodstypes: [],
      useSearchVue: true,
      texts: 'search',
      searchFileds: ['project_name'],
      list_values: 'user reason year main_city',
      lists: "mainList:raw@json_absences all_users+city_id reasons params",
      columns: [['dt_from', 'Дата с'], 
      ['dt_to', 'Дата по'], 
      ['user', 'Сотрудник'],
      ['reason', 'Причина'], 
      ['project_name', 'Адрес проекта/объекта'],
      ['time_from', 'С'], ['time_to', 'По'] ]
      
    }) %>,

    mounted() {
      // if (localStorage.user){
        // this.user = localStorage.user
      // }
    },

    created() {
      this.city = this.main_city
      this.onCityChange()  
      this.filtersAvailable.forEach( f => {
        if (localStorage[f]) {
          let v = localStorage[f]
          if (this[f] != undefined && this[f + 's'] != undefined) {
            this[f] = this[f + 's'].filter(f => f.value == v) // fill v-chosen
            if (this[f][0] != undefined)
              this.fillFilter(f, this[f][0].label) // add filter like select from chosen
          }
        }
      })

      this.params.forEach( p => {
        if (this[p.label] != undefined && this[p.label + 's'] != undefined) {
            this[p.label] = this[p.label + 's'].filter(f => f.value == p.value) // fill v-chosen
            this.fillFilter(p.label, this[p.label][0].label) // add filter like select from chosen
        }
      })
      delay("app.readyToChange = true", 800)
    },

    watch: {
      user(newValue) {
        // console.log('newValue', newValue)
        if (newValue != undefined) localStorage.user = newValue.value
        else delete localStorage['user']
      }
    },

    methods: {
      onCityChange() {
        this.users.length = 0

        let users = this.all_users.filter(f => f.city_id == this.main_city.value)
        users.forEach(u => this.users.push(u))
        // console.log('onCityChange()', this.users)

        this.fillFilter(':user', _.pluck(this.users, 'label'))
      },
      
      switchOpenedRow(ind, i) {
        Vue.set(this.opened[ind], i, !this.opened[ind][i])
      },

      cutRowClass(index, idx){
        let cls = 'altcut'
        if (!this.opened[index][idx]) cls = cls + ' cutted'
        return cls
      },

      rowClass(item, index, name = 'head', add = '') {
        addClass = ''
        switch(item.p_status) {
          case 5:
          addClass = " info"
          break;
          case 2:
          addClass = " nonactual"
          break;
        }
        return "absences_index_" + name + " table_row" + addClass + " " + add
      },

      siteUrl(url){
        var prefix = 'http://';
        var pref2  = 'https://';
        if (url.substr(0, prefix.length) !== prefix && url.substr(0, pref2.length) !== pref2) { 
          url = prefix + url;
        }
        return url;
      },

      editGroup(grp){
        return '/absences/'+grp.id+'/edit'
      }


    }

  })
</script>