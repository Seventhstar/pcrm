<script>
    let app = new Vue({
    el: '#user_card',
    mixins: [m_index],
    data: {
      model: 'User',
      
      year: <%= @year[:id] %>,
      tabs: [{value: 1, label: 'Проекты'}, {value: 2, label: 'Отсутствия'}, {value: 3, label: 'Лиды'}],
      
      filteredLeads: [],
      filteredProjects: [],
      filteredAbsences: [],

      closedProjects: 0,
      yearBeforeclosedProjects: 0,

      yearBeforeLeads: [],
      yearBeforeProjects: [],
      yearBeforeAbsences: [],

      groupedLeads: [],
      groupedProjects: [],
      groupedAbsences: [],


      absenceColumnTitles: [ ['#', 'Цель', 'Адрес проекта/объекта', 'Время', 'Дата'],
                             ['#', 'Адрес проекта/объекта', 'Время', 'Дата'],
                             ['Комментарий', 'Время', 'C', 'По'],
                             ['Комментарий', 'Время', 'C', 'По'],
                             ['Комментарий', 'Время', 'C', 'По']
                            ],

      leads:    <%= @user_leads %>,
      reasons:  <%= for_vue(@reasons) %>,
      absences: <%= for_vue(@user.absences.order(:reason_id, :project_id, :dt_from), [:reason_name, :project_name, :target_name]) %>,
      projects: <%= @user_projects %> 
    },

    created() {
      // this.year = new Date().getFullYear()
      this.updateLists()
      this.setActive(this.tabs[0])
    },

    mounted(){
      // this.$root.$on('onInput', function (id) {console.log(id)});
    },

    computed: {
      currentTab: function () {
        return this.tabs.reduce((accum, curr) => {return curr.active ? curr : accum}, {});
      },      

      docCount() {return this.docList.length;},
      audioCount() {return this.audioList.length;}

    },

    methods: {  

      getColumnsIndex(id) {
        switch (id) {
          case 2: return 0
          case 3: return 1
        }
        return 2
      },
      
      formatDate(date) {
        return format_date(date)
      },

      tabClass(currentTab){
        if (currentTab.active) return 'ui-tabs-active'
        return ''
      },

      setActive(currentTab) {
        this.tabs.forEach((el,ind) => {Vue.set(this.tabs[ind], 'active', el === currentTab)})
      },

      timeDuration(row) {
        t1 = moment(row.dt_from).format()
        t2 = moment(row.dt_to).format()

        duration = moment.duration(moment(t2).diff(t1)); 
        return duration.asHours();
      },

      describeDelta(current, before) {
        delta  = before > 0 ? ((current - before) / before * 100) : ''
        delta = toInt(delta)

        delta = delta > 0 ? ("+" + delta) : (delta < 0 ? delta : '')  
        delta = delta!='' ? " " + delta + "%" : ''
        return delta
      },

      projectsSummary() {
        current = this.filteredProjects.length
        before = this.yearBeforeProjects.length
        return this.describeDelta(current, before)
      },

      leadsSummary() {
        current = this.filteredLeads.length
        before = this.yearBeforeLeads.length
        return this.describeDelta(current, before)
      },

      absenceDiff(row) {
        let diffHours = diff_hours(row.dt_from, row.dt_to)
        if (row.reason_id == 4 || diffHours > 12) return diff_days(row.dt_from, row.dt_to) + " дн."
        return diffHours + " ч"
      },

      absencesSummary(grouped, row) {
        let a = grouped[row]
        total = 0
        if (a != undefined){
          if (a[0].reason_id == 4 || a[0].reason_id == 5) {
            a.forEach((f) => {total = total + diff_days(f.dt_from, f.dt_to) })
            return Math.ceil(total) + "д (" + a.length + ")"
          } else { 
            a.forEach((f) => {total = total + diff_hours(f.dt_from, f.dt_to)})
          }
        return Math.ceil(total) + "ч (" + a.length +")"
        }
        return ''
      },

      dataLength(array, key = undefined) {
        let o  = key == undefined ? array : array[key]
        length = o == undefined ? 0 : o.length 
        return length
      },

      updateLists() {
        this.filteredLeads = []
        this.filteredProjects = []
        this.filteredAbsences = []

        this.yearBeforeLeads = []
        this.yearBeforeProjects = []
        this.yearBeforeAbsences = []

        var ly = this.leads.filter(    l => this.getYear(l.start_date) == this.year )
        var ay = this.absences.filter( a => this.getYear(a.dt_from) == this.year )

        this.projectsByYears = _.groupBy(this.projects, 'year')
        var py = this.projectsByYears[this.year]
        
        // console.log(this.projectsYears, py)

        this.groupedLeads    = _.groupBy(ly, 'status_name') 
        this.groupedProjects = _.groupBy(py, 'project_type_name') 
        this.groupedAbsences = _.groupBy(ay, 'reason_name') 

        this.leadsStatuses   = _.keys(this.groupedLeads)
        // this.projectStatuses = _.keys(this.groupedProjects)
        this.absenceReasons  = _.keys(this.groupedAbsences)

        for (var l in ly) this.filteredLeads.push(ly[l])
        last_prj = 0
        last_date = 0
        prj_count = 0
        for (var a in ay) {
          if (last_prj != ay[a].project_id) {
            last_prj = ay[a].project_id
            prj_count = 0
          }
          if (last_date != format_date(ay[a].dt_from) ){
            prj_count += 1
            last_date = format_date(ay[a].dt_from)
            ay[a]['in_id'] = prj_count
          }

          this.filteredAbsences.push(ay[a])
        }

        this.closedProjects = 0
        this.yearBeforeclosedProjects = 0
        for (var p in py) {
          this.filteredProjects.push(py[p])
          if (py[p].pstatus_id == 3) this.closedProjects += 1
        }

        var ly = this.leads.filter( l => this.getYear(l.start_date) == (this.year-1) )
        var ay = this.absences.filter( a => this.getYear(a.dt_from) == (this.year-1) )

        var py = this.projectsByYears[this.year-1]

        for (var l in ly) this.yearBeforeLeads.push(ly[l])
        for (var a in ay) this.yearBeforeAbsences.push(ay[a])
        for (var p in py) {
          this.yearBeforeProjects.push(py[p])
          if (py[p].pstatus_id == 3) this.yearBeforeclosedProjects += 1
        }

        this.groupedLeadsBefore    = _.groupBy(ly, 'status_name') 
        this.groupedProjectsBefore = _.groupBy(py, 'project_type_name') 
        this.groupedAbsencesBefore = _.groupBy(ay, 'reason_name') 

        this.leadsStatuses   = _.uniq(this.leadsStatuses.concat(_.keys(this.groupedLeadsBefore)))
        this.absenceReasons  = _.uniq(this.absenceReasons.concat(_.keys(this.groupedAbsencesBefore)))

        this.absenceReasons.forEach( r => {
          if (!this.reasons.filter( f => f.name == r).length) this.reasons.push({label: r, value: r}) 
        })  

        this.filteredAbsences = _.groupBy(this.filteredAbsences, 'reason_name') 
        this.fkeysAbsences   = _.keys(this.filteredAbsences)

        // add projects
        var prj = this.projects.forEach( p => {
          if (this.getYear(p.date_end) != p.year) {
            if (this.getYear(p.date_end) == this.year) {
              if (this.groupedProjects[p.project_type_name] == undefined) {
                Vue.set(this.groupedProjects, p.project_type_name, [])
              } 
            
              if (this.projectsByYears[this.year] == undefined) this.projectsByYears[this.year] = []
              this.projectsByYears[this.year].push(p)

              this.filteredProjects.push(p)
              this.groupedProjects[p.project_type_name].push(p)
              if (p.pstatus_id == 3) {
                // console.log('2019', p)
                this.closedProjects += 1
                this.yearBeforeclosedProjects -= 1
              }
            }

            if ((this.getYear(p.date_end) == this.year-1) || 
                (this.getYear(p.date_end) == this.year && p.year < this.year-1 )){
              
              if (this.groupedProjectsBefore[p.project_type_name] == undefined) {
                Vue.set(this.groupedProjectsBefore, p.project_type_name, [])
              }

              if (this.projectsByYears[this.year-1] == undefined) this.projectsByYears[this.year-1] = []
              this.projectsByYears[this.year-1].push(p)

              this.yearBeforeProjects.push(p)
              this.groupedProjectsBefore[p.project_type_name].push(p)
              if (p.pstatus_id == 3) this.yearBeforeclosedProjects += 1
            }

          }
        })
        this.projectsYears   = _.keys(this.projectsByYears).sort().reverse()
        this.projectsYears.length = 2
        this.projectStatuses = _.uniq(_.keys(this.groupedProjects).concat(_.keys(this.groupedProjectsBefore)))
      },

      checkYearClass(row) {
        cls = "td"
        if (this.getYear(row.date_start) != this.getYear(row.date_end)) cls += ' hot'
        return cls
      },

      projectClass(prj) {
        add = ""
        // console.log('prj', prj)
        if (prj.status_id == 3) {
          // console.log('prj', prj)
          add = " nonactual"
        }


        return "table_row user_projects" + add
      },

      absenceDetailClass(pref, id){
        switch(id){
          case 2:
            return pref + ' user_absences_target'
          case 3: 
            return pref + ' user_absences_shop'
          default: 
            return pref + ' user_absences'
        }
      },

      getYear(date) {
        // console.log('date', date, date.substr(0,4))
        if (date != null) return date.substr(0, 4)
        return ''
      },

      setData(name, data) {
        if (!this.listNames.length) this.listNames = [name]
        if (this[name] == undefined) this[name] = []

        this[name].push(data);
        this.updateLists()
      },

      editLink(model, id){
        url = "/" + model + "/" + id + "/edit"
        window.open(url, '_blank');
      },

      onInput(e){
        if (e.name == 'year') this.year = e.value
        if (e.name == 'main_city') {
          this.city = e.value 
        }
        this.updateLists()
      }
    }
  });

</script>