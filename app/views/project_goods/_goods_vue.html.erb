<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.vue_app',
    data: <%= fill_vue_data(@project, {
      f_gt: true,

      confirmModal: false,
      currentIndex: 0,
      currentGoods: '',
      
      inputs: ['name', 'date_place', 'description', 'gsum'],
      selects: ['provider', 'currency'],
      
      fields: [],
      controls: [],
      
      offerAmount: {},
      orderAmount: {},
      closedAmount: {},
      
      grandOfferTotal: [],
      grandOrderTotal: [],
      grandClosedTotal: [],
      

      lists: "projects currencies+short",

      providers: @providers,
      project_g_types: [],

      goods: @goods
     }, 'pgoods') %>,

    updated(){
      this.onInput();
    },

    beforeCreate(){

    },

    created(){
      this.projects.forEach(()=>this.addControlAndField())
      this.calculateTotal()
    },

    mounted(){
      this.$root.$on('onInput', this.onInput);
      this.$root.$on('modalYes', this.modalYes);
      document.body.addEventListener('keyup', e => {if (e.keyCode === 45) this.addRow(); });
    },

    methods: {

      getProject(){

      },

      projectLink(prj_id){
        let prj = this.projects.filter(w => w.value === parseInt(prj_id))
        let name = prj.length>0 ? "/projects/"+prj[0].value+"/edit" : 'Ошибка'
        return name
      },

      projectAddress(prj_id){
        let prj = this.projects.filter(w => w.value === parseInt(prj_id))
        let name = prj.length>0 ? prj[0].label  : 'Ошибка'
        return name
      },

      addControlAndField(){
        // let h = {providers: null, gsum: 0}
        // this.inputs.forEach( c => h[c] = '' );
        // h.date_place = format_date();
        // this.fields.push(h);
        this.controls.push({opened: false, valid: false});
      },

      deleteGoods(index, goods){
        this.currentGoods = goods;
        this.currentIndex = index;
        this.confirmModal = true;
      },

      modalYes(){
        if (this.currentGoods === '' || !this.confirmModal ) return;
        let index = this.goods[this.currentIndex][1].indexOf(this.currentGoods);
        if (index<0) return;
        this.goods[this.currentIndex][1].splice(index, 1);
        delete_item('/project_goods/'+this.currentGoods.id);
      },

      onChange(key, index){
        let valid = true;
        let pref = 'goods_'+key+'_'; 

        this.inputs.forEach( c => {if (v_nil(this.fields[index][c])) {valid = false;} });
        this.selects.forEach( c => {if (v_nil(app[c])) {valid = false;}});

        this.controls[index].valid = valid;  
      },

      onInput(e){
        if (e === undefined || e.index === undefined) return;
        this.onChange(e.key, e.index);
      },

      switchOpened(index){
        this.currentIndex = index
        this.controls[index].opened = !this.controls[index].opened
      },

      openedOrHaveData(index, length){
        return !this.closedTable(index); 
      },

      closedTable(index){
        if (this.controls[index] === undefined) {this.controls.push({opened: false, valid: false})}
        return !this.controls[index].opened;
      },

      format_date(date){
        return format_date(date);
      },

      v_nil(v){
        return v_nil(v);
      },

      formatTotal(amountArray){
        let string = ""
        if (amountArray === undefined) return ""
        this.currencies.forEach( c => {
          amount = amountArray[c.value];
          if (amount > 0) {string = string + to_sum(amount) + " " + c.short + ", "}
        })
        return string.slice(0, -2)
      },

      calculateAmount(gt){
        this.offerAmount[gt] = {}
        this.orderAmount[gt] = {}
        this.closedAmount[gt] = {}

        this.currencies.forEach( c => {
          this.offerAmount[gt][c.value] = 0 
          this.orderAmount[gt][c.value] = 0
          this.closedAmount[gt][c.value] = 0
        })

        for (var gi in this.goods[gt][1]){
            g = this.goods[gt][1][gi]
            c = g.currency_id
            this.offerAmount[gt][c] = this.offerAmount[gt][c] + parseInt(g.gsum)
            this.orderAmount[gt][c] = this.orderAmount[gt][c] + toInt(g.sum_supply)
            if (g.fixed)
              this.closedAmount[gt][c] = this.closedAmount[gt][c] + toInt(g.sum_supply)
        }

        if (this.offerAmount[gt] === undefined) return ""
        return this.formatTotal(this.offerAmount[gt])
      },

      allAmount(g){
        offer = g.gsum > 0 ? g.gsum : ''
        hasOrder = g.order && g.sum_supply != g.gsum
        offer = hasOrder ? "<span class='striked'>" + to_sum(offer) + '</span>' : to_sum(offer)
        order = hasOrder ? "<br>" + to_sum(g.sum_supply) : ''
        return offer + order
      },

      rowClass(g){

        if (g.fixed)
          cls = "fixed"
        else if (g.sum_supply>0)
          cls = "ordered" 
        else
          cls = "placed"
        
        return "grid_table_goods grid_table sw_color " + cls
      },

      goodsEditLink(g){
        return "/project_goods/" + g.id + "/edit"
      },

      goodsDeleteLink(g){
        return "/project_goods/" + g.id 
      }

      
    }
    })

</script>