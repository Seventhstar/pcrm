<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.vue_app',
    mixins: [vmxGoods],
    data: <%= fill_vue_data(@project, {
      f_gt: true,

      confirmModal: false,
      currentIndex: 0,
      currentIdx: 0,
      currentGoods: '',
      
      inputs: ['name', 'date_place', 'description', 'gsum'],
      selects: ['provider', 'currency'],
      
      fields: [],
      controls: [],
      counts: [],
      
      offerAmount: {},
      orderAmount: {},
      closedAmount: {},
      
      grandOfferTotal: [],
      grandOrderTotal: [],
      grandClosedTotal: [],

      grouped: [],
      groupHeaders: [],

      lists: "currencies+short goodstypes",
      texts: 'groupKey',

      providers: @providers,
      projects: @projects,
      project_g_types: [],

      goods: @goods,
      opened: @opened
     }, 'pgoods') %>,

    updated(){
      this.onInput();
    },

    beforeCreate(){

    },

    created(){
      this.makeGroup('project_id')
    },


    methods: {

      cutClass(index, alt = false){
        let cls = alt ? 'altcut' : 'cut'
        if (!this.controls[index].opened) cls = cls + ' cutted'
        return cls
      },

      cutAllClass(index){
        let cls = 'allcut'
        if (!this.controls[index].opened) cls = cls + ' cutted'
        return cls
      },

      cutRowClass(index, idx){
        let cls = 'cut'
        if (!this.controls[index].openedRow[idx]) cls = cls + ' cutted'
        return cls
      },

      projectLink(prj_id){
        let prj = this.projects.filter(w => w.value === parseInt(prj_id))
        let key = _.keys(this.grouped[prj_id])[0]
        let id  = this.grouped[prj_id][key][0].project_id
        let name = id > 0 ? "/projects/"+id+"/edit#tabs-4" : '/projects'
        return name
      },

      goodstypeName(idx){
        let gt = 0
        let field = 'label'
        if (this.groupKey == 'project_id')
          gt = this.goodstypes.filter(w => w.value === parseInt(idx))
        else {
          gt = this.projects.filter(w => w.id === parseInt(idx))
          field = 'address'
        }

        if (gt === undefined || gt[0] === undefined) return 'no'
        return gt[0][field]
      },

      goodstypeHead(idx, item){
         return this.goodstypeName(idx) + ' (' + this.grouped[item][idx].length + ')'
      },

      goodsCount(item){
        let count = 0
        for (let i in this.grouped[item]){count = count + this.grouped[item][i].length}
        return count
      },

      projectAddress(prj_id, index = null){
        let name = this.grouped[prj_id]
        let key  = _.keys(this.grouped[prj_id])[0]
        let rows = this.grouped[prj_id][key]

        if (this.groupKey == 'project_id') {
          name = rows[0].address  
        } else {
          name = rows[0].provider_name  
        }
        return name
      },

      nonGroupKey(g) {
        if (this.groupKey == 'project_id')
          return g.provider_name
        return g.address
      },

      addControlAndField(){
        this.controls.push({opened: false, valid: false, count: 0, openedRow: []});
      },

      deleteGoods(index, goods, idx){
        this.currentGoods = goods;
        this.currentIndex = index;
        this.currentIdx   = idx;
        this.confirmModal = true;
      },

      modalYes(){
        if (this.currentGoods === '' || !this.confirmModal ) return;
        let index = this.grouped[this.currentIndex][this.currentIdx].indexOf(this.currentGoods);

        if (index < 0) return;
        this.grouped[this.currentIndex][this.currentIdx].splice(index, 1);
        delete_item('/project_goods/' + this.currentGoods.id);
      },

      onChange(key, index){
        let valid = true;
        let pref = 'goods_'+key+'_'; 

        this.inputs.forEach( c => {if (v_nil(this.fields[index][c])) {valid = false;} });
        this.selects.forEach( c => {if (v_nil(app[c])) {valid = false;}});

        this.controls[index].valid = valid;  
      },

      onInput(e){
        if (e === undefined || e.index === undefined) return;
        this.onChange(e.key, e.index);
      },

      switchOpened(index){
        this.currentIndex = index
        let opened = !this.controls[index].opened
        this.controls[index].opened = opened

        if (!opened){
          _.keys(this.grouped[index]).forEach( k => {
            Vue.set(this.controls[index].openedRow, k, opened);
          })
        }
      },      

      switchAllOpened(index){
        this.currentIndex = index
        let opened = !this.controls[index].opened
        this.controls[index].opened = opened
        _.keys(this.grouped[index]).forEach( k => {
          Vue.set(this.controls[index].openedRow, k, opened);
        })
      },

      switchOpenedRow(index, idx){
        this.currentIndex = index
        if (this.controls[index].openedRow[idx] == undefined) this.controls[index].openedRow[idx] = false
        let opened = !this.controls[index].openedRow[idx];
        Vue.set(this.controls[index].openedRow, idx, opened);

      },

      openedOrHaveData(index, length){
        return !this.closedTable(index); 
      },

      gtRowsOpened(index, idx){
        return this.controls[index].openedRow[idx];
      },

      closedTable(index){
        if (this.controls[index] === undefined) {this.controls.push({opened: false, valid: false, count: 0, openedRow: []})}
        return !this.controls[index].opened;
      },

      calculateAmount(prj_id){
        this.offerAmount[prj_id] = {}
        this.orderAmount[prj_id] = {}
        this.closedAmount[prj_id] = {}

        this.currencies.forEach( c => {
          this.offerAmount[prj_id][c.value] = 0 
          this.orderAmount[prj_id][c.value] = 0
          this.closedAmount[prj_id][c.value] = 0
        })

        for (var gt in this.grouped[prj_id]){
          for (var gi in this.grouped[prj_id][gt]){
            let g = this.grouped[prj_id][gt][gi]
            let c = g.currency_id
            
            this.offerAmount[prj_id][c] = this.offerAmount[prj_id][c] + parseInt(g.gsum)
            this.orderAmount[prj_id][c] = this.orderAmount[prj_id][c] + toInt(g.sum_supply)

            if (g.fixed)
              this.closedAmount[prj_id][c] = this.closedAmount[prj_id][c] + toInt(g.sum_supply)
          }
        }

        if (this.offerAmount[prj_id] === undefined) return ""
        return this.formatTotal(this.offerAmount[prj_id])
      },

      makeFilter(){

      },

      makeGroup(id){
        this.groupKey = id
        secondGroup = id == 'project_id' ? 'goodstype_id' : 'project_id'

        _.sortBy(this.goods, 'goods_priority_id')

        this.controls.length  = 0

        grouped  = _.groupBy(this.goods, id)
        var data = _.map(grouped, group => {
          _.sortBy(group, 'created_at')
          return _.groupBy(group, secondGroup)
        });

        this.grouped = data;

        this.groupHeaders     = _.keys(this.grouped)
        this.groupHeaders.forEach((gh, i) => {this.addControlAndField(); })

        if (this.opened !== null){
          let opened = this.opened.split('.');
          let t = this
          opened.forEach(i => {
            if (i !== '') t.controls[i].opened = true 
            _.keys(this.grouped[i]).forEach(k => { 
              Vue.set(this.controls[i].openedRow, k, true);
            });

          });
        }
      },
      
      sortBy(id){
        this.makeGroup(id)
      },

      goodsEditLink(g){
        return "/project_goods/" + g.id + "/edit?group="+ this.groupKey
      },

    }
  })

</script>