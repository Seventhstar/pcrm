<script>
  Vue.component('v-select', VueSelect.VueSelect)

  let app = new Vue({
    el: '.vue_app',
    data: <%= fill_vue_data(@project, {
      f_gt: true,

      confirmModal: false,
      currentIndex: 0,
      currentIdx: 0,
      currentGoods: '',
      
      inputs: ['name', 'date_place', 'description', 'gsum'],
      selects: ['provider', 'currency'],
      
      fields: [],
      controls: [],
      
      offerAmount: {},
      orderAmount: {},
      closedAmount: {},
      
      grandOfferTotal: [],
      grandOrderTotal: [],
      grandClosedTotal: [],

      grouped: [],
      groupHeaders: [],
      groupKey1: 'project_id',

      lists: "projects currencies+short goodstypes",
      texts: 'groupKey',

      providers: @providers,
      project_g_types: [],

      goods: @goods,
      opened: @opened
     }, 'pgoods') %>,

    updated(){
      this.onInput();
    },

    beforeCreate(){

    },

    created(){
      this.makeGroup('project_id')
      
      // console.log('opened', this.opened, this.controls)

      
    },

    mounted(){
      this.$root.$on('onInput', this.onInput);
      this.$root.$on('modalYes', this.modalYes);
      document.body.addEventListener('keyup', e => {if (e.keyCode === 45) this.addRow(); });
    },

    methods: {

      cutClass(index, alt = false){
        
        let cls = alt ? 'altcut' : 'cut'


        if (!this.controls[index].opened) cls = cls + ' cutted'
        return cls
      },

      projectLink(prj_id){
        let prj = this.projects.filter(w => w.value === parseInt(prj_id))
        let key = _.keys(this.grouped[prj_id])[0]
        let id  = this.grouped[prj_id][key][0].project_id
        let name = id > 0 ? "/projects/"+id+"/edit#tabs-4" : '/projects'
        return name
      },

      goodstypeName(idx){
        let gt = this.goodstypes.filter(w => w.value === parseInt(idx))
        if (gt == undefined) return 'no'
        return gt[0].label
      },

      goodstypeHead(idx, item){
         return this.goodstypeName(idx) + ' (' + this.grouped[item][idx].length + ')'
      },

      projectAddress(prj_id, index = null){
        let name = this.grouped[prj_id]
        if (this.groupKey == 'project_id'){

          let key  = _.keys(this.grouped[prj_id])[0]
          let rows = this.grouped[prj_id][key]
          name = rows[0].address + " (позиций: " + rows.length + ")" 
          // console.log('name', name);
        }
          // name = 'Адрес'
        else
          name = name.provider_name
        return name
      },

      nonGroupKey(g) {
        if (this.groupKey == 'project_id')
          return g.provider_name
        return g.address
      },

      addControlAndField(){
        this.controls.push({opened: false, valid: false, openedRow: []});
      },

      deleteGoods(index, goods, idx){
        this.currentGoods = goods;
        this.currentIndex = index;
        this.currentIdx   = idx;
        this.confirmModal = true;
        // console.log('goods', goods, 'index', index)
      },

      modalYes(){
        if (this.currentGoods === '' || !this.confirmModal ) return;
        
        // console.log('this.currentIndex', this.currentIndex, 
                    // 'this.currentIdx',  this.currentIdx,
                    // 'this.currentGoods', this.currentGoods);

        let index = this.grouped[this.currentIndex][this.currentIdx].indexOf(this.currentGoods);

        if (index < 0) return;
        this.grouped[this.currentIndex][this.currentIdx].splice(index, 1);
        // console.log('this.currentGoods.id', this.currentGoods.id)
        delete_item('/project_goods/' + this.currentGoods.id);
      },

      onChange(key, index){
        let valid = true;
        let pref = 'goods_'+key+'_'; 

        this.inputs.forEach( c => {if (v_nil(this.fields[index][c])) {valid = false;} });
        this.selects.forEach( c => {if (v_nil(app[c])) {valid = false;}});

        this.controls[index].valid = valid;  
      },

      onInput(e){
        if (e === undefined || e.index === undefined) return;
        this.onChange(e.key, e.index);
      },

      switchOpened(index){
        this.currentIndex = index
        this.controls[index].opened = !this.controls[index].opened
        _.keys(this.grouped[index]).forEach( k => {
          Vue.set(this.controls[index].openedRow, k, this.controls[index].opened);
        })
      },

      switchOpenedRow(index, idx){
        this.currentIndex = index
        if (this.controls[index].openedRow[idx] == undefined) this.controls[index].openedRow[idx] = false
        Vue.set(this.controls[index].openedRow, idx, !this.controls[index].openedRow[idx]);
      },

      openedOrHaveData(index, length){
        return !this.closedTable(index); 
      },

      gtRowsOpened(index, idx){
        return this.controls[index].openedRow[idx];
      },

      closedTable(index){
        if (this.controls[index] === undefined) {this.controls.push({opened: false, valid: false, openedRow: []})}
        return !this.controls[index].opened;
      },

      format_date(date){
        return format_date(date);
      },

      v_nil(v){
        return v_nil(v);
      },

      formatTotal(amountArray){
        let string = ""
        if (amountArray === undefined) return ""
        this.currencies.forEach( c => {
          amount = amountArray[c.value];
          if (amount > 0) {string = string + to_sum(amount) + " " + c.short + ", "}
        })
        return string.slice(0, -2)
      },

      calculateAmount(prj_id){
        this.offerAmount[prj_id] = {}
        this.orderAmount[prj_id] = {}
        this.closedAmount[prj_id] = {}

        this.currencies.forEach( c => {
          this.offerAmount[prj_id][c.value] = 0 
          this.orderAmount[prj_id][c.value] = 0
          this.closedAmount[prj_id][c.value] = 0
        })

        // console.log("this.grouped[prj_id]", prj_id, this.grouped)

        for (var gt in this.grouped[prj_id]){
          for (var gi in this.grouped[prj_id][gt]){
            g = this.grouped[prj_id][gt][gi]
            c = g.currency_id
            this.offerAmount[prj_id][c] = this.offerAmount[prj_id][c] + parseInt(g.gsum)
            this.orderAmount[prj_id][c] = this.orderAmount[prj_id][c] + toInt(g.sum_supply)
            if (g.fixed)
              this.closedAmount[prj_id][c] = this.closedAmount[prj_id][c] + toInt(g.sum_supply)
          }
        }

        if (this.offerAmount[prj_id] === undefined) return ""
        return this.formatTotal(this.offerAmount[prj_id])
      },

      allAmount(g){
        offer = g.gsum > 0 ? g.gsum : ''
        hasOrder = g.order && g.sum_supply != g.gsum
        offer = hasOrder ? "<span class='striked'>" + to_sum(offer) + '</span>' : to_sum(offer)
        order = hasOrder ? "<br>" + to_sum(g.sum_supply) : ''
        return offer + order
      },

      makeGroup(id){
        this.groupKey         = id
        
        grouped          = _.groupBy(this.goods, id)
        var data = _.map(grouped, (group)=>{
            _.sortBy(group, 'created_at')
           return _.groupBy(group, 'goodstype_id')

        });

        this.grouped = data;

        this.groupHeaders     = Object.keys(this.grouped)
        this.controls.length  = 0
        this.groupHeaders.forEach(()=>this.addControlAndField())

        if (this.opened !== null){
          let opened = this.opened.split('.');
          let t = this
          opened.forEach(i=>{
            if (i!=='') t.controls[i].opened = true 
            _.keys(this.grouped[i]).forEach( k => {Vue.set(this.controls[i].openedRow, k, true); })
          });
        }
      },
      
      sortBy(id){
        this.makeGroup(id)
      },

      rowClass(g){

        if (g.fixed)
          cls = "fixed"
        else if (g.sum_supply>0)
          cls = "ordered" 
        else
          cls = "placed"    
        return "grid_table_goods grid_table sw_color " + cls
      },

      goodsEditLink(g){
        return "/project_goods/" + g.id + "/edit"
      },

      goodsDeleteLink(g){
        return "/project_goods/" + g.id 
      }

      
    }
    })

</script>